#include <ArduinoJson.h>
#include <Arduino.h>
#include <SPI.h>
#include <WiFi.h>
#include <internet.h>
#include <PubSubClient.h>

#define jogadoresMaximos 4 // Define o número máximo de jogadores
#define cartasMaximas 3    // Define o número máximo de cada carta

WiFiClient espClient;
PubSubClient client(espClient);

struct Jogo
{
  bool jogoIniciado = false; // Variável para armazenar o estado do jogo
};
Jogo jogo;

struct Jogadores
{
  bool HandCards = false; // Variável para armazenar o estado das cartas na mão do jogador
  bool Ready = false;     //
};

Jogadores listajogador[jogadoresMaximos]; // Cria um array de jogadores com o tamanho máximo definido

int contagemJogadores = 0; // Variável para armazenar o número de jogadores

// Configuracao do MQTT
const char *mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;
const char *mqtt_id = "ProjetoCoup";
const char *mqtt_topic_sub = "senai134/Diller/esp_inscrito";
const char *mqtt_topic_pub = "senai134/Diller/esp_publicando";
String mqtt_topic_subs[jogadoresMaximos];
String mqtt_topic_pubs[jogadoresMaximos];

// Funções auxiliares
void mqttConnect(void);
void numerojogadoresProntos(void);
void distribuicaoCartas(void);
void jogadoresProntos(void);
void distribuicaoCartas(void);
void eliminarCartas(char *topic, byte *payload, unsigned int length);

void setup()  
{
  conectaWiFi();                            // Conecta ao WiFi
  client.setServer(mqtt_server, mqtt_port); // Define o servidor MQTT e a porta
  client.setCallback(eliminarCartas);       // Define a função de callback para receber mensagens MQTT
  for (int i = 0; i < jogadoresMaximos; i++)
  {
    mqtt_topic_subs[i] = String("senai134/Jogador") + (i+1) + "/esp_inscrito";   // Define os tópicos de inscrição para cada jogador
    mqtt_topic_pubs[i] = String("senai134/Jogador") + (i+1) + "/esp_publicando"; // Define os tópicos de publicação para cada jogador
  }
}

void loop()

{
  mqttConnect();
  checkWiFi();
  client.loop();
  jogadoresProntos();
}

void jogadoresProntos() // Verifica e adiciona os jogadore ao jogo por meio do monitor serial(Corrigir)
{
  Serial.begin(9600);
  if (Serial.available())
  {
    String mensagem = Serial.readStringUntil('\n');
    mensagem.trim();
    mensagem.toLowerCase();

    if (mensagem == "numero de jogadores")
    {
      int tamanho = mensagem.length();
      String extration = mensagem.substring(18, tamanho); // Extrai o número de jogadores da mensagem
      contagemJogadores = extration.toInt();

      if (contagemJogadores < jogadoresMaximos)
      {
        listajogador[contagemJogadores].Ready = true;
        Serial.print("Jogadores prontos: ");
        Serial.println(contagemJogadores);
      }
    }
    else
    {
      Serial.println("Mensagem inválida.");
    }
  }
  Serial.end();
}
void mqttConnect() // Conecta ao servidor MQTT e se inscreve nos tópicos dos jogadores
{
  while (!client.connected())
  {
    Serial.println("Conectando ao MQTT...");

    if (client.connect(mqtt_id))
    {
      Serial.println("Conectado com sucesso");
      for (int i = 0; i < jogadoresMaximos; i++)
      {
        client.subscribe(mqtt_topic_subs[i].c_str());
      }
    }
    else
    {
      Serial.print("Falha, rc=");
      Serial.println(client.state());
      Serial.println("Tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void numerojogadoresProntos() // Verifica o numero de jogadores prontos e comeca a partida
{
  unsigned long tempoEspera = millis();        // Variável para armazenar o tempo de espera
  static unsigned long tempoUltimaConexao = 0; // Variável para armazenar o tempo da última conexão WiFi

  if (contagemJogadores >= 2 && !jogo.jogoIniciado)
  {
    Serial.println("Numero de jogadores suficiente, iniciando o jogo...");
    jogo.jogoIniciado = true;

    for (int i = 0; i < contagemJogadores; i++)
    {
      listajogador[i].HandCards = true;
    }
  }
  else if (contagemJogadores < 2)
  {

    {
      Serial.println("Aguardando mais jogadores");
      delay(3000);
    }
  }
}

void distribuicaoCartas() // Distribui as cartas para os jogadores
{

  randomSeed(analogRead(0)); // Inicializa o gerador de números aleatórios

  if (contagemJogadores < 2)
    return;

  const int quantidadeCartas = 3;
  int cartasDisponiveis[quantidadeCartas] = {3, 3, 3};
  int cartasJogadores[contagemJogadores][2];

  for (int i = 0; i < contagemJogadores; i++)
  {
    for (int j = 0; j < 2; j++)
    {
      int cartasDistribuir;

      do
      {
        cartasDistribuir = random(0, quantidadeCartas);
      } while (cartasDisponiveis[cartasDistribuir] <= 0);

      cartasJogadores[i][j] = cartasDistribuir;
      cartasDisponiveis[cartasDistribuir]--;

      for (int i = 0; i < contagemJogadores; i++)
      {
        StaticJsonDocument<128> doc;
        JsonArray cartas = doc.createNestedArray("cartas");
        cartas.add(cartasJogadores[i][0]);
        cartas.add(cartasJogadores[i][1]);
        char buffer[128];
        serializeJson(doc, buffer);
        String topic = "jogador" + String(i + 1) + "/cartas";
        client.publish(topic.c_str(), buffer);
      }
    }
  }
}

void eliminarCartas(char *topic, byte *payload, unsigned int length) // le o topico mqtt do jogador e envia para todos os jogadores a acao
{
  String mensagem = "";
  for (unsigned int i = 0; i < length; i++)
  {
    char c = (char)payload[i];
    mensagem += c;
  }

  mensagem.trim();
  mensagem.toLowerCase();

  for (int i = 0; i < jogadoresMaximos; i++) // Verifica se a mensagem é de algum dos tópicos de inscrição
  {
    if (String(topic) == mqtt_topic_subs[i]) // Verifica se o tópico corresponde ao jogador atual
    {

      
      if (mensagem.startsWith("Eliminar")) 
      {
        client.publish("senai134/Diller/esp_publicando", ("As influencias estao sendo ameacadas!"));
      }
      else if (mensagem.startsWith("Fim de turno"))
      {
        client.publish("senai134/Diller/esp_publicando", ("O turno do jogador " + String(i + 1) + " terminou!").c_str());
      }
      else if (mensagem.startsWith("Bloqueio"))
      {
        client.publish("senai134/Diller/esp_publicando", ("As influencias do jogador" + String(i + 1) + "estao salvas!").c_str());
      }
      else if (mensagem.startsWith("Roubar 2 moedas"))
      {
        client.publish("senai134/Diller/esp_publicando", ("Os fragmentos estao sendo almejados"));
      }
    }
  }
}
