#include <ArduinoJson.h>
#include <Arduino.h>
#include <SPI.h>
#include <WiFi.h>
#include <internet.h>
#include <PubSubClient.h>

#define jogadoresMaximos 4
#define cartasMaximas 3

WiFiClient espClient;
PubSubClient client(espClient);

struct Jogo {
  bool jogoIniciado = false;
};
Jogo jogo;

struct Jogadores {
  bool HandCards = false;
  bool Ready = false;
};

Jogadores listajogador[jogadoresMaximos];
int contagemJogadores = 0;

const char *mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;
const char *mqtt_id = "ProjetoCoup";
const char *mqtt_topic_sub = "senai134/Dealer/esp_inscrito";

String mqtt_topic_subs[jogadoresMaximos];
String mqtt_topic_pubs[jogadoresMaximos];

void mqttConnect(void);
void numerojogadoresProntos(void);
void distribuicaoCartas(void);
void jogadoresProntos(char *topic, byte *payload, unsigned int length);
void eliminarCartas(char *topic, byte *payload, unsigned int length);
void callbackMQTT(char *topic, byte *payload, unsigned int length);
void conectaWiFi();
void checkWiFi();

void setup() {
  conectaWiFi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callbackMQTT);

  for (int i = 0; i < jogadoresMaximos; i++) {
    mqtt_topic_subs[i] = String("senai134/Jogador") + (i + 1) + "/esp_inscrito";
    mqtt_topic_pubs[i] = String("senai134/Jogador") + (i + 1) + "/esp_publicando";
  }
}

void loop() {
  if (WiFi.status() != WL_CONNECTED) conectaWiFi();
  if (!client.connected()) mqttConnect();
  client.loop();
  numerojogadoresProntos();
}

void mqttConnect() {
  while (!client.connected()) {
    if (client.connect(mqtt_id)) {
      for (int i = 0; i < jogadoresMaximos; i++) {
        client.subscribe(mqtt_topic_subs[i].c_str());
      }
    } else {
      delay(5000);
    }
  }
}

void jogadoresProntos(char *topic, byte *payload, unsigned int length) 
{
  String mensagem = "";
  for (unsigned int i = 0; i < length; i++) 
  {
    mensagem += (char)payload[i];
  }
  mensagem.trim();
  mensagem.toLowerCase();

  for (int i = 0; i < jogadoresMaximos; i++) 
  {
    if (String(topic) == mqtt_topic_subs[i]) 
    {
      if (mensagem.startsWith("pronto") && !listajogador[i].Ready) 
      {
        listajogador[i].Ready = true;
        contagemJogadores++;
      }
    }
  }
}

void numerojogadoresProntos() {
  if (contagemJogadores >= 2 && !jogo.jogoIniciado) 
  {
    jogo.jogoIniciado = true;

    for (int i = 0; i < contagemJogadores; i++)
    {
      listajogador[i].HandCards = false;
    }

    distribuicaoCartas();
  }
}

void distribuicaoCartas() {
  randomSeed(analogRead(0));

  const int quantidadeCartas = 3;
  int cartasDisponiveis[quantidadeCartas] = {3, 3, 3};
  int cartasJogadores[jogadoresMaximos][2];

  for (int i = 0; i < contagemJogadores; i++) 
  {
    for (int j = 0; j < 2; j++) 
    {
      int carta;
      do 
      {
        carta = random(0, quantidadeCartas);
      } while (cartasDisponiveis[carta] <= 0);

      cartasJogadores[i][j] = carta;
      cartasDisponiveis[carta]--;
    }

    JsonDocument doc;
    JsonArray cartas = doc.createNestedArray("cartas");
    cartas.add(cartasJogadores[i][0]);
    cartas.add(cartasJogadores[i][1]);
    char buffer[128];
    serializeJson(doc, buffer);
    String topic = "jogador" + String(i + 1) + "/cartas";
    client.publish(topic.c_str(), buffer);
    listajogador[i].HandCards = true;
  }
}

void eliminarCartas(char *topic, byte *payload, unsigned int length) {
  String mensagem = "";
  for (unsigned int i = 0; i < length; i++) {
    mensagem += (char)payload[i];
  }

  mensagem.trim();
  mensagem.toLowerCase();

  for (int i = 0; i < jogadoresMaximos; i++) {
    if (String(topic) == mqtt_topic_subs[i]) {
      if (mensagem.startsWith("eliminar")) 
      {
        client.publish("senai134/Dealer/esp_publicando", "As influencias estao sendo ameacadas!");
      } 
      else if (mensagem.startsWith("fim de turno")) 
      {
        client.publish("senai134/Dealer/esp_publicando", ("O turno do jogador " + String(i + 1) + " terminou!").c_str());
      } 
      else if (mensagem.startsWith("bloqueio")) 
      {
        client.publish("senai134/Dealer/esp_publicando", ("As influencias do jogador " + String(i + 1) + " estao salvas!").c_str());
      } 
      
      else if (mensagem.startsWith("roubar 2 moedas")) 
      {
        client.publish("senai134/Dealer/esp_publicando", "Os fragmentos estao sendo almejados");
      }
    }
  }
}

void callbackMQTT(char *topic, byte *payload, unsigned int length) {
  jogadoresProntos(topic, payload, length);
  eliminarCartas(topic, payload, length);
}
