#include <ArduinoJson.h>
#include <Arduino.h>
#include <SPI.h>
#include <WiFi.h>
#include <internet.h>
#include <PubSubClient.h>

WiFiClient espClient;
PubSubClient client(espClient);

struct Game
{
  bool gameStarted = false;  // Variável para armazenar o estado do jogo
  bool gamecardBoto = false; // Variável para armazenar o estado da carta Boto
  bool gamecardSaci = false; // Variável para armazenar o estado da carta Saci
  bool gamecardIara = false; // Variável para armazenar o estado da carta Iara
};
Game game;
struct Players
{
  int playersCount = 0;         // Variável para armazenar o número de jogadores
  bool playerEndturn = false;   // Variável para armazenar o estado do turno do jogador
  bool playerHandCards = false; // Variável para armazenar o estado das cartas na mão do jogador
};
Players players;

const char *mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;
const char *mqtt_id = "esp32-senai225-Henrique";
const char *mqtt_topic_sub = "senai134/Jogador1/esp_inscrito";
const char *mqtt_topic_sub2 = "senai134/Jogador2/esp_inscrito";
const char *mqtt_topic_pub = "senai134/Jogador1/esp_publicando";
const char *mqtt_topic_pub2 = "senai134/Jogador2/esp_publicando";
const char *mqtt_topic_pub3 = "senai134/Diller/esp_publicando";

unsigned long tempoEspera = millis();        // Variável para armazenar o tempo de espera
static unsigned long tempoUltimaConexao = 0; // Variável para armazenar o tempo da última conexão WiFi

void callback(char *, byte *, unsigned int);
void mqttConnect(void);
void handCards(void);
void checkPlayers(void);

void setup()
{
  Serial.begin(9600);

  conectaWiFi();                            // Conecta ao WiFi
  client.setServer(mqtt_server, mqtt_port); // Define o servidor MQTT e a porta
  client.setCallback(callback);             // Define a função de callback para receber mensagens MQTT
}

void loop()
{
  mqttConnect(); // Conecta ao MQTT
  checkWiFi();    // Verifica a conexão WiFi
  client.loop();  // Mantém o loop do cliente MQTT ativo
  checkPlayers(); // Verifica o número de jogadores e inicia o jogo se necessário
  handCards();    // Verifica se o jogador pode comprar cartas e ativa as cartas correspondentes
}

void callback(char *topic, byte *payload, unsigned int length)
{

  String mensagem = "";
  for (unsigned int i = 0; i < length; i++)
  {
    char c = (char)payload[i];
    mensagem += c;
  }

  mensagem.trim();
  mensagem.toLowerCase();

  if (mensagem == "ready")
  {
    players.playersCount++; // Incrementa o número de jogadores quando recebe a mensagem "ready"
    Serial.print("Jogadores prontos: ");
    Serial.println(players.playersCount); // Exibe o número de jogadores prontos
  }
}

void mqttConnect()
{
  while (!client.connected())
  {
    Serial.println("Conectando ao MQTT...");

    if (client.connect(mqtt_id))
    {
      Serial.println("Conectado com sucesso");
      client.subscribe(mqtt_topic_sub);
      client.subscribe(mqtt_topic_sub2);
    }
    else
    {
      Serial.print("Falha, rc=");
      Serial.println(client.state());
      Serial.println("Tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void checkPlayers()
{
  if (players.playersCount >= 2) // Verifica se há pelo menos 2 jogadores
  {
    if (tempoEspera - tempoUltimaConexao > 2500)
      Serial.println("Número de jogadores suficiente. Iniciando o jogo...");
    game.gameStarted = true;
  }
  else if (tempoEspera - tempoUltimaConexao > 3000) // Se o número de jogadores for menor que 2 e o tempo de espera for maior que 3 segundos
  {

    Serial.println("Aguardando mais jogadores...");
  }

  if (game.gameStarted && players.playersCount == 2) // Se o jogo já começou e o turno do jogador terminou
  {
    players.playerHandCards = true;
  }

  tempoUltimaConexao = tempoEspera; // Atualiza o tempo da última conexão
}

void handCards()
{
  if (players.playerHandCards)
  {
    int numero = esp_random();

    unsigned int jogador = random(1, 4);       // Gera um número aleatório para determinar o jogador que vai receber a carta
    unsigned int jogador2 = random(1,4);      // Gera um número aleatório para determinar o segundo jogador que vai receber a carta

    Serial.println("Jogador sorteado: ");
    delay(1500);
    Serial.println(jogador);
    delay(3000); // Exibe o número do jogador sorteado
    JsonDocument doc1;
    JsonDocument doc2;

    switch (jogador) // Verifica o número do jogador
    {
    case 1:
      game.gamecardSaci = true;               // Ativa a carta Saci para o jogador 1
      doc1["Carta 1"] = "Saci";               // Adiciona a carta Saci ao objeto JSON do jogador 1
      client.publish(mqtt_topic_pub, "Saci"); // Publica a mensagem "Saci" no tópico do jogador 1
      break;
    case 2:
      game.gamecardIara = true;               // Ativa a carta Iara para o jogador 1
      doc1["Carta 1"] = "Iara";               // Adiciona a carta Iara ao objeto JSON do jogador 1
      client.publish(mqtt_topic_pub, "Iara"); // Publica a mensagem "Iara" no tópico do jogador 1
      break;
    case 3:
      game.gamecardBoto = true;               // Ativa a carta Boto para o jogador 1
      doc1["Carta 1"] = "Boto";               // Adiciona a carta Boto ao objeto JSON do jogador 1
      client.publish(mqtt_topic_pub, "Boto"); // Publica a mensagem "Boto" no tópico do jogador 1
      break;

    default:
      break;
    }

    switch (jogador2) // Verifica o número do segundo jogador
    {
    case 1:
      game.gamecardSaci = true;                // Ativa a carta Saci para o jogador 2
      doc2["Carta 1"] = "Saci";                // Adiciona a carta Saci ao objeto JSON do jogador 2
      client.publish(mqtt_topic_pub2, "Saci"); // Publica a mensagem "Saci" no tópico do jogador 2
      break;
    case 2:
      game.gamecardIara = true;                // Ativa a carta Iara para o jogador 2
      doc2["Carta 1"] = "Iara";                // Adiciona a carta Iara ao objeto JSON do jogador 2
      client.publish(mqtt_topic_pub2, "Iara"); // Publica a mensagem "Iara" no tópico do jogador 2
      break;
    case 3:
      game.gamecardBoto = true;                // Ativa a carta Boto para o jogador 2
      doc2["Carta 1"] = "Boto";                // Adiciona a carta Boto ao objeto JSON do jogador 2
      client.publish(mqtt_topic_pub2, "Boto"); // Publica a mensagem "Boto" no tópico do jogador 2
      break;
    default:
      break;
    }
  }
}
